{"title":"Hammerspoon  一款Mac上提升你工作学习效率的神器","uid":"a0870e85994130b27751635f41a5a534","slug":"article-title","date":"2023-07-28T07:09:03.000Z","updated":"2023-07-31T08:53:17.114Z","comments":true,"path":"api/articles/article-title.json","keywords":null,"cover":[],"content":"<h2 id=\"什么是Hammerspoon？\"><a href=\"#什么是Hammerspoon？\" class=\"headerlink\" title=\"什么是Hammerspoon？\"></a>什么是Hammerspoon？</h2><p>Hammerspoon是一款针对macOS的自动化工具。其核心与本质是在lua脚本引擎与操作系统之间的桥梁和通道，赋予用户极大的能力和自由度去调用系统功能，最大化地发挥系统功能，提升我们的学习和工作效率。</p>\n<p>至于lua的语法，对于稍微有编程基础的同学来说都很好理解。以下是一个lua的快速学习参考链接，可以参考，在此就不展开介绍了。</p>\n<ul>\n<li><a href=\"https://learnxinyminutes.com/docs/lua/\">Lua语言快速入门</a></li>\n</ul>\n<h2 id=\"Hammerspoon可以帮我做什么？\"><a href=\"#Hammerspoon可以帮我做什么？\" class=\"headerlink\" title=\"Hammerspoon可以帮我做什么？\"></a>Hammerspoon可以帮我做什么？</h2><p>顾名思义，Hammerspoon翻译过来为锤子勺子，既能帮你干一些体力活，也能辅助你完成一些日常精细的工作。</p>\n<p>你可以编写简单的lua代码与macOS系统进行充分交互。控制和操作MacOS系统的应用软件、窗口、输入法、鼠标、文件系统、声音设备、屏幕、剪贴板、wifi等等。</p>\n<p>我来依照我自身的日常使用场景来举几个例子。</p>\n<ul>\n<li><p><code>一键唤起各个特定应用</code></p>\n<p>   我们工作或学习时可能经常会打开多个软件，并在这几个应软件进行频繁切换。当然，Mac下用触摸板或者Cmd+Tab可以实现方便切换。打开2-3个软件时原生的方法可能会很方便，但如果你打开5个应用以上时，你部分时间可能就得消耗在一直分辨、挑选真正想打开的软件。</p>\n<p>  而使用Hammerspoon你可以定义一系列的快捷键，来轻松唤起特定的应用，实现即想即达。</p>\n<p>  比如我用 <code>Cmd+Ctrl+w</code> 可以轻松唤出微信，<code>Cmd+Ctrl+c</code>打开Chrome，<code>Cmd+Ctrl+d</code>打开钉钉，<code>Cmd+Ctrl+t打开终端iTerm2</code>等等。</p>\n</li>\n<li><p><code>多软件下的输入法个性化配置</code></p>\n<p>  一般我们会打开微信、钉钉用中文进行消息发送，但切换到终端时我们需要用英文进行命令行或者编程。Hammerspoon可以支持我们对特定的应用进行对应输入法的配置。比如我配置微信、钉钉无论何时打开都是中文，同时终端一般默认用英文输入法。</p>\n</li>\n<li><p><code>多屏下窗口快速移动和鼠标焦点切换及窗口布局</code></p>\n<ul>\n<li>鼠标焦点和光标切换<ul>\n<li>在编程或者查看资料的时候，需要经常在多个屏幕中切换。所以我借助Hammerspoon配置了多个屏幕下切换光标焦点的快捷键。</li>\n</ul>\n</li>\n<li>软件窗口在多个屏幕间快速移动<ul>\n<li>在演示功能用例或者预览资料的时候，大屏预览会比较舒服和方便。快捷键可实现快速移动，并且自动最大化，无需你重新调整窗口布局。</li>\n</ul>\n</li>\n<li>同屏幕多软件窗口布局。<ul>\n<li>支持同屏幕打开多个窗口，并进行各种比例的布局。常见的是左右布局及上下布局。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><code>自定义快捷键，查看当前天气、公历农历时间。</code></p>\n<ul>\n<li>有时候我们在沉浸式地全屏时，想看天气或者很多资料，Hammerspoon支持我们调用系统展示层，进行相应的信息展示，非常方便。如下所示。</li>\n</ul>\n<p>  <img src=\"/img/hammer_time.png\" alt=\"img\"></p>\n</li>\n</ul>\n<h2 id=\"如何安装Hammerspoon？\"><a href=\"#如何安装Hammerspoon？\" class=\"headerlink\" title=\"如何安装Hammerspoon？\"></a>如何安装Hammerspoon？</h2><p>点击<a href=\"https://github.com/Hammerspoon/hammerspoon/releases/tag/0.9.100\">Hammerspoon下载</a>，解压之后，直接拖到应用软件目录下即可完成安装。</p>\n<h2 id=\"如何配置及应用Hammerspoon？\"><a href=\"#如何配置及应用Hammerspoon？\" class=\"headerlink\" title=\"如何配置及应用Hammerspoon？\"></a>如何配置及应用Hammerspoon？</h2><ul>\n<li><p>新建Hammerspoon配置目录</p>\n<p>  Hammerspoon需要在如下目录下自定义创建配置文件 <code>~/.hammerspoon/init.lua</code> ，如果没有<code>.hammerspoon</code>目录，则需要新建。</p>\n</li>\n</ul>\n<p>目录结构介绍</p>\n<p><code>~/.hammerspoon</code> —— 配置文件主目录</p>\n<ul>\n<li>init.lua —— 配置总入口，加载相关配置文件</li>\n<li>modules —— 各模块目录<ul>\n<li>hotkey.lua  —— 组合快捷键定义</li>\n<li>inputsources.lua —— 应用软件输入法实现</li>\n<li>windows.lua —— 窗口布局、移动、聚焦等实现</li>\n</ul>\n</li>\n</ul>\n<p>安装及基本配置目录创建完成后，就可以进行编写代码实现你的个性化需求了。</p>\n<ul>\n<li>各配置文件配置<ul>\n<li><strong>首先是入口文件init.lua</strong>，可参照如下配置。入口文件中引用其他配置文件，同时我配置了重新加载配置的功能，方便修改配置文件后即时生效。</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"lua\">-- Reload config automatically\nlocal configFileWatcher\nfunction reloadConfig()\n  configFileWatcher:stop()\n  configFileWatcher = nil\n  hs.reload()\nend\n\nconfigFileWatcher = hs.pathwatcher.new(os.getenv(&quot;HOME&quot;) .. &quot;/.hammerspoon/&quot;, reloadConfig)\nconfigFileWatcher:start()\n\n-- Load local modules\nrequire &quot;modules/hotkey&quot; -- hotkey.lua\nrequire &quot;modules/windows&quot; -- windows.lua\nrequire &quot;modules/inputsource&quot; -- inputsource.lua\n\n-- Load Spoons\n--\n\n-- Finally, show a notification that we finished loading the config\nhs.notify.new( &#123;title=&#39;Hammerspoon&#39;, subTitle=&#39;Configuration loaded&#39;&#125; ):send()\n</code></pre>\n<pre><code>- 组合快捷键定义modules目录下的hotkey.lua\n</code></pre>\n<pre><code class=\"lua\">hyper = &#123;&quot;cmd&quot;, &quot;ctrl&quot;, &quot;alt&quot;&#125;\nhyperShift = &#123;&quot;alt&quot;, &quot;shift&quot;&#125;\nhyperCtrl = &#123;&quot;alt&quot;, &quot;ctrl&quot;&#125;\nhyperAlt = &#123;&quot;ctrl&quot;, &quot;alt&quot;, &quot;shift&quot;&#125;\n</code></pre>\n<pre><code>- 然后是modules目录下的inputsource.lua文件，为各应用设置对应的输入法\n</code></pre>\n<pre><code class=\"lua\">local application = require &quot;hs.application&quot;\nlocal hotkey = require &quot;hs.hotkey&quot;\nlocal window = require &quot;hs.window&quot;\nlocal alert = require &quot;hs.alert&quot;\nlocal keycodes = require &quot;hs.keycodes&quot;\nlocal function Chinese()\n    -- 简体拼音\n    keycodes.currentSourceID(&quot;com.sogou.inputmethod.sogou.pinyin&quot;)\nend\n\nlocal function English()\n    -- ABC\n    keycodes.currentSourceID(&quot;com.apple.keylayout.ABC&quot;)\nend\n\n-- app to expected ime config\n-- app和对应的输入法\nlocal app2Ime = &#123;\n    &#123;&#39;/Applications/iTerm.app&#39;, &#39;English&#39;&#125;,\n    &#123;&#39;/System/Library/CoreServices/Finder.app&#39;, &#39;English&#39;&#125;,\n    &#123;&#39;/Applications/System Preferences.app&#39;, &#39;English&#39;&#125;,\n    &#123;&#39;/Applications/DingTalk.app&#39;, &#39;Chinese&#39;&#125;,\n    &#123;&#39;/Applications/WeChat.app&#39;, &#39;Chinese&#39;&#125;,\n    &#123;&#39;/Applications/Notion.app&#39;, &#39;Chinese&#39;&#125;,\n    -- &#123;&#39;/Applications/Google Chrome.app&#39;, &#39;English&#39;&#125;,\n    -- &#123;&#39;/Applications/Kindle.app&#39;, &#39;English&#39;&#125;,\n    -- &#123;&#39;/Applications/Visual Studio Code.app&#39;, &#39;English&#39;&#125;,\n    -- &#123;&#39;/Applications/Xcode.app&#39;, &#39;English&#39;&#125;,\n&#125;\n\nfunction updateFocusAppInputMethod()\n    local ime = &#39;English&#39;\n    local focusAppPath = window.frontmostWindow():application():path()\n    -- alert.show(&quot;path:  &quot;..focusAppPath )\n    for index, app in pairs(app2Ime) do\n        -- alert.show(&quot;app:  &quot;..app[1])\n        -- alert.show(&quot;im:  &quot;..app[2])\n        local appPath = app[1]\n        local expectedIme = app[2]\n\n        if focusAppPath == appPath then\n            ime = expectedIme\n            break\n        end\n    end\n\n    if ime == &#39;English&#39; then\n        English()\n    else\n        Chinese()\n    end\nend\n\n-- helper hotkey to figure out the app path and name of current focused window\n-- 当选中某窗口按下ctrl+command+m时会显示应用的路径等信息\nhotkey.bind(&#123;&#39;ctrl&#39;, &#39;cmd&#39;&#125;, &quot;m&quot;, function()\n    alert.show(&quot;App path is:        &quot;\n    ..window.focusedWindow():application():path()\n    ..&quot;\\n&quot;\n    ..&quot;App name:      &quot;\n    ..window.focusedWindow():application():name()\n    ..&quot;\\n&quot;\n    ..&quot;IM source id:  &quot;\n    ..keycodes.currentSourceID())\nend)\n\n-- Handle cursor focus and application&#39;s screen manage.\n-- 窗口激活时自动切换输入法\nfunction applicationWatcher(appName, eventType, appObject)\n    if (eventType == application.watcher.activated or eventType == application.watcher.launched) then\n        updateFocusAppInputMethod()\n    end\nend\n\nappWatcher = application.watcher.new(applicationWatcher)\nappWatcher:start()\n</code></pre>\n<pre><code>   - 最后是modules目录下的windows.lua文件，进行窗口、屏幕、鼠标的控制。\n</code></pre>\n<pre><code class=\"lua\">-- window management\nlocal application = require &quot;hs.application&quot;\nlocal hotkey = require &quot;hs.hotkey&quot;\nlocal window = require &quot;hs.window&quot;\nlocal layout = require &quot;hs.layout&quot;\nlocal grid = require &quot;hs.grid&quot;\nlocal hints = require &quot;hs.hints&quot;\nlocal screen = require &quot;hs.screen&quot;\nlocal alert = require &quot;hs.alert&quot;\nlocal fnutils = require &quot;hs.fnutils&quot;\nlocal geometry = require &quot;hs.geometry&quot;\nlocal mouse = require &quot;hs.mouse&quot;\n\n-- default 0.2\nwindow.animationDuration = 0\n-- alert.defaultStyle[&#39;fadeOutDuration&#39;] = 0.05\n\nfunction toggle_full()\n    local win = window.focusedWindow()\n    if win:isFullScreen() then\n        win:toggleFullScreen()\n    end\nend\n-- left half\nhotkey.bind(hyperCtrl, &quot;h&quot;, function()\n  if window.focusedWindow() then\n    window.focusedWindow():moveToUnit(layout.left50)\n  else\n    alert.show(&quot;No active window&quot;)\n  end\nend)\n\n-- right half\nhotkey.bind(hyperCtrl, &quot;l&quot;, function()\n  toggle_full()\n  window.focusedWindow():moveToUnit(layout.right50)\nend)\n\n-- top half\nhotkey.bind(hyperCtrl, &quot;k&quot;, function()\n  toggle_full()\n  window.focusedWindow():moveToUnit&#39;[0,0,100,50]&#39;\nend)\n\n-- bottom half\nhotkey.bind(hyperCtrl, &quot;j&quot;, function()\n  toggle_full()\n  window.focusedWindow():moveToUnit&#39;[0,50,100,100]&#39;\nend)\n\n-- full screen\nhotkey.bind(hyperCtrl, &#39;;&#39;, function() \n  window.focusedWindow():toggleFullScreen()\nend)\n\n-- center window\nhotkey.bind(hyperCtrl, &#39;c&#39;, function() \n  toggle_full()\n  window.focusedWindow():centerOnScreen()\nend)\n\n-- maximize window\nhotkey.bind(hyperCtrl, &#39;m&#39;, function()\n  toggle_full()\n  toggle_maximize()\nend)\n\n-- defines for window maximize toggler\nlocal frameCache = &#123;&#125;\n-- toggle a window between its normal size, and being maximized\nfunction toggle_maximize()\n    local win = window.focusedWindow()\n    win:maximize()\nend\n\n-- move active window to previous monitor\nhotkey.bind(hyper, &quot;h&quot;, function()\n  window.focusedWindow():moveOneScreenWest()\nend)\n\n-- move active window to next monitor\nhotkey.bind(hyper, &quot;l&quot;, function()\n  window.focusedWindow():moveOneScreenEast()\nend)\n\n-- open application using shortcut\nhotkey.bind(&#123;&#39;ctrl&#39;, &#39;cmd&#39;&#125;, &quot;c&quot;, function()\n  application.open(&#39;Google Chrome.app&#39;)\nend)\nhotkey.bind(&#123;&#39;ctrl&#39;, &#39;cmd&#39;&#125;, &quot;e&quot;, function()\n  application.open(&#39;Microsoft Edge.app&#39;)\nend)\nhotkey.bind(&#123;&#39;ctrl&#39;, &#39;cmd&#39;&#125;, &quot;t&quot;, function()\n  application.open(&#39;iTerm.app&#39;)\nend)\nhotkey.bind(&#123;&#39;ctrl&#39;, &#39;cmd&#39;&#125;, &quot;w&quot;, function()\n  application.open(&#39;WeChat.app&#39;)\nend)\nhotkey.bind(&#123;&#39;ctrl&#39;, &#39;cmd&#39;&#125;, &quot;d&quot;, function()\n  application.open(&#39;DingTalk.app&#39;)\nend)\nhotkey.bind(&#123;&#39;ctrl&#39;, &#39;cmd&#39;&#125;, &quot;n&quot;, function()\n  application.open(&#39;Notion.app&#39;)\nend)\n-- open Desktop Folder\nhotkey.bind(&#123;&#39;ctrl&#39;, &#39;cmd&#39;&#125;, &quot;f&quot;, function()\n  hs.execute(&#39;open /Users/Feng/Desktop/&#39;, true);\nend)\n\n--Predicate that checks if a window belongs to a screen\nfunction isInScreen(screen, win)\n  return win:screen() == screen\nend\n\nfunction focusScreen(screen)\n  --Get windows within screen, ordered from front to back.\n  --If no windows exist, bring focus to desktop. Otherwise, set focus on\n  --front-most application window.\n  local windows = fnutils.filter(\n      window.orderedWindows(),\n      fnutils.partial(isInScreen, screen))\n  local windowToFocus = #windows &gt; 0 and windows[1] or window.desktop()\n  windowToFocus:focus()\n\n  -- move cursor to center of screen\n  local pt = geometry.rectMidPoint(screen:fullFrame())\n  mouse.setAbsolutePosition(pt)\nend\n\n-- maximized active window and move to selected monitor\nlocal moveto = function(win, n)\n  local screens = screen.allScreens()\n  if n &gt; #screens then\n    alert.show(&quot;Only &quot; .. #screens .. &quot; monitors &quot;)\n  else\n    local toWin = screen.allScreens()[n]:name()\n    -- alert.show(&quot;Move &quot; .. win:application():name() .. &quot; to &quot; .. toWin)\n    layout.apply(&#123;&#123;nil, win:title(), toWin, layout.maximized, nil, nil&#125;&#125;)\n    -- window.focusedWindow():toggleFullScreen()\n  end end\n\n//move cursor in different screens\nhotkey.bind(hyperShift, &quot;1&quot;, function()\n  -- local win = window.focusedWindow()\n  -- moveto(win, 1)\n  focusScreen(screen.allScreens()[1])\n  alert.show(&quot;Mac-1&quot;, 1)\n  -- alert.show(&quot;Cursor is on the &quot; .. screen.allScreens()[1]:fullFrame().. &quot; monitors &quot;)\n\nend)\n\nhotkey.bind(hyperShift, &quot;2&quot;, function()\n  focusScreen(screen.allScreens()[3])\n  alert.show(&quot;Redmi-2&quot;, 1)\nend)\n\nhotkey.bind(hyperShift, &quot;3&quot;, function()\n  focusScreen(screen.allScreens()[2])\n  alert.show(&quot;Dell-3&quot;, 1)\nend)\n</code></pre>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上就是Hammerspoon的整体介绍了，希望看到这篇文章的你能有收获~</p>\n","text":"什么是Hammerspoon？Hammerspoon是一款针对macOS的自动化工具。其核心与本质是在lua脚本引擎与操作系统之间的桥梁和通道，赋予用户极大的能...","permalink":"/post/article-title","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AFHammerspoon%EF%BC%9F\"><span class=\"toc-text\">什么是Hammerspoon？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Hammerspoon%E5%8F%AF%E4%BB%A5%E5%B8%AE%E6%88%91%E5%81%9A%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">Hammerspoon可以帮我做什么？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85Hammerspoon%EF%BC%9F\"><span class=\"toc-text\">如何安装Hammerspoon？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%BA%94%E7%94%A8Hammerspoon%EF%BC%9F\"><span class=\"toc-text\">如何配置及应用Hammerspoon？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"Feng","slug":"blog-author","avatar":"https://betterfeng.cn/avatar_feng.jpg","link":"/","description":"Stay focused, be present.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"WebRTC 1对1实时音视频直播入门","uid":"3b39a4d8d73647456fc0c99c50fc60aa","slug":"WebRTC","date":"2024-04-16T10:09:03.000Z","updated":"2024-04-17T02:42:43.046Z","comments":true,"path":"api/articles/WebRTC.json","keywords":null,"cover":[],"text":"💡 设想一个情景：相隔两地的A和B，想进行音视频通信。应该怎么实现？ 当然，对于现在的人们来说，我们有很多的手段，包括常见的即时通信工具（QQ、微信）、腾讯会议...","permalink":"/post/WebRTC","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"12 mins."},"categories":[],"tags":[],"author":{"name":"Feng","slug":"blog-author","avatar":"https://betterfeng.cn/avatar_feng.jpg","link":"/","description":"Stay focused, be present.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Hello World","uid":"b9663f58f18133b35bfe243f3e916a80","slug":"hello-world","date":"2023-07-28T03:59:37.942Z","updated":"2023-07-28T03:59:37.942Z","comments":true,"path":"api/articles/hello-world.json","keywords":null,"cover":null,"text":"Welcome to Hexo! This is your very first post. Check documentation for more info...","permalink":"/post/hello-world","photos":[],"count_time":{"symbolsCount":440,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Feng","slug":"blog-author","avatar":"https://betterfeng.cn/avatar_feng.jpg","link":"/","description":"Stay focused, be present.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}